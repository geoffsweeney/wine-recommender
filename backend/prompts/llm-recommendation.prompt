---
name: llm-recommendation
description: Generates wine recommendations based on user preferences.
version: 1.0.0
input_schema: |
  import { z } from 'zod';
  import { UserPreferences } from '../../types';

  export const LLMRecommendationInputSchema = z.object({
    userPreferences: UserPreferences.describe('The current accumulated user preferences.'),
    conversationHistory: z.array(z.object({
      role: z.enum(['user', 'assistant']),
      content: z.string(),
    })).describe('The recent conversation history between the user and the assistant.'),
    priceRange: z.object({
      min: z.number().optional(),
      max: z.number().optional(),
    }).optional().describe('The user\'s preferred price range for the wine.'),
    occasion: z.string().optional().describe('The occasion for which the wine is being recommended (e.g., dinner party, casual evening).'),
    wineStyle: z.array(z.string()).optional().describe('The desired style of wine (e.g., bold red, crisp white).'),
    bodyPreference: z.enum(['light', 'medium', 'full']).optional().describe('The user\'s preference for wine body.'),
    sweetness: z.enum(['dry', 'off-dry', 'medium-dry', 'medium-sweet', 'sweet']).optional().describe('The user\'s preference for wine sweetness.'),
    availableWines: z.array(z.object({
      name: z.string(),
      grapeVarieties: z.array(z.string()).optional(),
      region: z.string().optional(),
      country: z.string().optional(),
      vintage: z.string().optional(),
      price: z.number().optional(),
      description: z.string().optional(),
      foodPairings: z.array(z.string()).optional(),
      wineStyle: z.array(z.string()).optional(),
      alcoholContent: z.number().optional(),
      body: z.enum(['light', 'medium', 'full']).optional(),
      sweetness: z.enum(['dry', 'off-dry', 'medium', 'sweet']).optional(),
      tannin: z.enum(['low', 'medium', 'high']).optional(),
      acidity: z.enum(['low', 'medium', 'high']).optional(),
      oakInfluence: z.enum(['none', 'light', 'medium', 'heavy']).optional(),
      fruitProfile: z.array(z.string()).optional(),
      earthiness: z.enum(['low', 'medium', 'high']).optional(),
      spiceNotes: z.array(z.string()).optional(),
      floralNotes: z.array(z.string()).optional(),
      mineralNotes: z.array(z.string()).optional(),
      nuttyNotes: z.array(z.string()).optional(),
      herbalNotes: z.array(z.string()).optional(),
      otherNotes: z.array(z.string()).optional(),
    })).optional().describe('A list of wines from the knowledge graph that match the user preferences. If provided, prioritize these wines.'),
  });

  export type LLMRecommendationInput = z.infer<typeof LLMRecommendationInputSchema>;

output_schema: |
  import { z } from 'zod';

  export const LLMRecommendationOutputSchema = z.object({
    recommendations: z.array(z.object({
      wineName: z.string().describe('The name of the recommended wine.'),
      reasoning: z.string().describe('A brief explanation of why this wine is recommended based on the user\'s preferences.'),
      grapeVarieties: z.array(z.string()).optional(),
      region: z.string().optional(),
      country: z.string().optional(),
      vintage: z.string().optional(),
      price: z.number().optional(),
      description: z.string().optional(),
      foodPairings: z.array(z.string()).optional(),
      wineStyle: z.array(z.string()).optional(),
      alcoholContent: z.number().optional(),
      body: z.enum(['light', 'medium', 'full']).optional(),
      sweetness: z.enum(['dry', 'off-dry', 'medium', 'sweet']).optional(),
      tannin: z.enum(['low', 'medium', 'high']).optional(),
      acidity: z.enum(['low', 'medium', 'high']).optional(),
      oakInfluence: z.enum(['none', 'light', 'medium', 'heavy']).optional(),
      fruitProfile: z.array(z.string()).optional(),
      earthiness: z.enum(['low', 'medium', 'high']).optional(),
      spiceNotes: z.array(z.string()).optional(),
      floralNotes: z.array(z.string()).optional(),
      mineralNotes: z.array(z.string()).optional(),
      nuttyNotes: z.array(z.string()).optional(),
      herbalNotes: z.array(z.string()).optional(),
      otherNotes: z.array(z.string()).optional(),
    })).describe('A list of wine recommendations.'),
    explanation: z.string().describe('A conversational explanation of the recommendations, tailored to the user\'s preferences.'),
    followUpQuestions: z.array(z.string()).optional().describe('Optional follow-up questions to further refine recommendations.'),
  });

  export type LLMRecommendationOutput = z.infer<typeof LLMRecommendationOutputSchema>;

---
You are an expert sommelier assistant. Your task is to provide personalized wine recommendations based on the user's preferences and conversation history.

**Important:**
- If a region or country is specified in the preferences, you MUST only recommend wines from that region or country. Do not include wines from other regions/countries.
- The field for the wine's name in each recommendation must be exactly "name". Do NOT use "wineName" or any other variant.
- Strictly follow the output schema. Do not add extra fields or wrappers.

User Preferences:
{{userPreferences}}

Conversation History:
{{#each conversationHistory}}
  {{this.role}}: {{this.content}}
{{/each}}

{{#if priceRange}}
  Price Range: {{#if priceRange.min}}${{priceRange.min}}{{/if}}{{#if priceRange.max}} - ${{priceRange.max}}{{/if}}
{{/if}}

{{#if occasion}}
  Occasion: {{occasion}}
{{/if}}

{{#if wineStyle}}
  Wine Style: {{wineStyle}}
{{/if}}

{{#if bodyPreference}}
  Body Preference: {{bodyPreference}}
{{/if}}

{{#if sweetness}}
  Sweetness: {{sweetness}}
{{/if}}

{{#if availableWines}}
  Here are some wines from our knowledge base that match the user's preferences. Prioritize these in your recommendations:
  {{availableWines}}
{{/if}}

Provide 1-3 wine recommendations. For each recommendation, include the wine name (field: "name") and a brief reasoning explaining why it's a good fit, including any region/country filtering that was applied. Also, provide a conversational explanation of the recommendations, tailored to the user's preferences. Optionally, include 1-2 follow-up questions to further refine future recommendations.

Your response must be a JSON object conforming to the `output_schema`. Do not include a "response" or "result" wrapper. Only output the JSON object as specified.