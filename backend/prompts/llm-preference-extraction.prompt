---
name: llm-preference-extraction
description: Extracts user preferences from conversation history.
version: 1.0.0
input_schema: |
  import { z } from 'zod';

  export const LLMPreferenceExtractionInputSchema = z.object({
    conversationHistory: z.array(z.object({
      role: z.enum(['user', 'assistant']),
      content: z.string(),
    })).describe('The recent conversation history between the user and the assistant.'),
    currentPreferences: z.object({
      wineStyle: z.array(z.string()).optional(),
      grapeVarieties: z.array(z.string()).optional(),
      regions: z.array(z.string()).optional(),
      countries: z.array(z.string()).optional(),
      foodPairings: z.array(z.string()).optional(),
      priceRange: z.object({
        min: z.number().optional(),
        max: z.number().optional(),
      }).optional(),
      occasion: z.array(z.string()).optional(),
      wineCharacteristics: z.array(z.string()).optional(),
      vintage: z.string().optional(),
      alcoholContent: z.object({
        min: z.number().optional(),
        max: z.number().optional(),
      }).optional(),
      body: z.enum(['light', 'medium', 'full']).optional(),
      sweetness: z.enum(['dry', 'off-dry', 'medium', 'sweet']).optional(),
      tannin: z.enum(['low', 'medium', 'high']).optional(),
      acidity: z.enum(['low', 'medium', 'high']).optional(),
      oakInfluence: z.enum(['none', 'light', 'medium', 'heavy']).optional(),
      fruitProfile: z.array(z.string()).optional(),
      earthiness: z.enum(['low', 'medium', 'high']).optional(),
      spiceNotes: z.array(z.string()).optional(),
      floralNotes: z.array(z.string()).optional(),
      mineralNotes: z.array(z.string()).optional(),
      nuttyNotes: z.array(z.string()).optional(),
      herbalNotes: z.array(z.string()).optional(),
      otherNotes: z.array(z.string()).optional(),
    }).describe('The current accumulated user preferences. Only update or add new preferences.'),
  });

  export type LLMPreferenceExtractionInput = z.infer<typeof LLMPreferenceExtractionInputSchema>;

output_schema: |
  import { z } from 'zod';

  export const LLMPreferenceExtractionOutputSchema = z.object({
    extractedPreferences: z.object({
      wineStyle: z.array(z.string()).optional(),
      grapeVarieties: z.array(z.string()).optional(),
      regions: z.array(z.string()).optional(),
      countries: z.array(z.string()).optional(),
      foodPairings: z.array(z.string()).optional(),
      priceRange: z.object({
        min: z.number().optional(),
        max: z.number().optional(),
      }).optional(),
      occasion: z.array(z.string()).optional(),
      wineCharacteristics: z.array(z.string()).optional(),
      vintage: z.string().optional(),
      alcoholContent: z.object({
        min: z.number().optional(),
        max: z.number().optional(),
      }).optional(),
      body: z.enum(['light', 'medium', 'full']).optional(),
      sweetness: z.enum(['dry', 'off-dry', 'medium', 'sweet']).optional(),
      tannin: z.enum(['low', 'medium', 'high']).optional(),
      acidity: z.enum(['low', 'medium', 'high']).optional(),
      oakInfluence: z.enum(['none', 'light', 'medium', 'heavy']).optional(),
      fruitProfile: z.array(z.string()).optional(),
      earthiness: z.enum(['low', 'medium', 'high']).optional(),
      spiceNotes: z.array(z.string()).optional(),
      floralNotes: z.array(z.string()).optional(),
      mineralNotes: z.array(z.string()).optional(),
      nuttyNotes: z.array(z.string()).optional(),
      herbalNotes: z.array(z.string()).optional(),
      otherNotes: z.array(z.string()).optional(),
    }).describe('The extracted or updated user preferences based on the latest user input. Only include preferences that are explicitly mentioned or updated in the current turn, or that are clearly implied as new additions. Do not repeat existing preferences unless they are being modified.'),
    clarificationQuestions: z.array(z.string()).optional().describe('If the user\'s request is ambiguous, ask clarifying questions to refine the preferences.'),
    confidenceScore: z.number().min(0).max(1).describe('A confidence score (0-1) indicating how certain the model is about the extracted preferences.'),
  });

  export type LLMPreferenceExtractionOutput = z.infer<typeof LLMPreferenceExtractionOutputSchema>;

---
You are an expert sommelier assistant. Your task is to extract and update user preferences from the conversation history.
Focus on the latest user input to identify new or modified preferences.
If a region or country is mentioned, extract it as a preference. Only output the preferences that are explicitly mentioned or updated in the current turn, or that are clearly implied as new additions. Do not repeat existing preferences unless they are being modified.
If the user's request is ambiguous (e.g., region/country is unclear), ask clarifying questions to refine the preferences.

Current accumulated preferences: {{currentPreferences}}

Conversation History:
{{#each conversationHistory}}
  {{this.role}}: {{this.content}}
{{/each}}

Your response must be a JSON object conforming to the `output_schema`. Do not include extra fields or wrappers.